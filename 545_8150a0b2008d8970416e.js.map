{"version":3,"file":"545_8150a0b2008d8970416e.js","mappings":"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","sources":["webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://CurrencyTracker/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://CurrencyTracker/./node_modules/@kurkle/color/dist/color.esm.js","webpack://CurrencyTracker/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://CurrencyTracker/./node_modules/chart.js/dist/chart.js","webpack://CurrencyTracker/./node_modules/react-chartjs-2/dist/index.js"],"sourcesContent":["function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.6\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.6\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.6\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef();\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width\n    }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, Object.assign({}, props, {\n            ref: ref,\n            type: type\n        })));\n}\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["_classCallCheck","a","n","TypeError","_defineProperties","e","r","t","length","o","enumerable","configurable","writable","Object","defineProperty","key","_createClass","prototype","_defineProperty","value","_getPrototypeOf","setPrototypeOf","getPrototypeOf","bind","__proto__","_setPrototypeOf","_inherits","create","constructor","_possibleConstructorReturn","ReferenceError","toPropertyKey","i","Symbol","toPrimitive","call","String","Number","_typeof","iterator","round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","b","c","d","f","hex","h1","h2","eq","hexString","g","isShort","alpha","undefined","HUE_RE","hsl2rgbn","s","k","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","hueValue","calln","Array","isArray","map","hsl2rgb","hue","hueParse","str","m","exec","p1","p2","hwb2rgb","hsv2rgb","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","nameParse","unpacked","keys","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","RGB_RE","to","pow","from","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","rgbParse","Color","type","ret","len","this","_rgb","_valid","valid","obj","rgbString","hslString","mix","color","weight","c1","c2","w2","p","w1","interpolate","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","noop","uid","id","isNullOrUndef","toString","slice","isObject","isNumberFinite","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","klen","isValidKey","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","y","resolveObjectKey","resolver","parts","split","part","push","_splitKey","_getKeyResolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","PI","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","niceRange","floor","fraction","isNumber","isNaN","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","sqrt","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","splice","forEach","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","getNumberFormat","format","formatters","values","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","animation","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","loop","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","toFontString","resolve","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","shadowRoot","useOffsetPos","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","maxHeight","containerSize","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","getContainerSize","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","el","getPropertyValue","getStyle","getRtlAdapter","rtl","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","iAxisKey","vAxisKey","adata","convertObjectDataToArray","isExtensible","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","disabled","toClip","defaultClip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","computeMinSampleSize","_cache","$bar","visibleMetas","concat","sort","getAllScaleValues","curr","_length","updateMinAndPrev","getPixelForValue","getPixelForTick","parseValue","entry","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","edge","borderSkipped","horizontal","borderProps","enableBorderRadius","parseEdge","orig","v2","startEnd","setInflateAmount","inflateAmount","BarController","categoryPercentage","barPercentage","grouped","_index_","_value_","super","bars","getBasePixel","isHorizontal","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","_getStacks","currentParsed","iScaleValue","skipNull","find","_getStackCount","_getStackIndex","pixels","barThickness","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","getDataVisibility","barSign","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","next","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","rects","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","skip","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","useY","deltaX","deltaY","getDistanceMetricForAxis","minDistance","getCenterPoint","getNearestItems","startAngle","endAngle","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","setLayoutDims","layouts","params","wrap","stackWeight","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","_tickSize","maxScale","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","spacing","ceil","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","majorStart","majorEnd","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","lineValue","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","getBarBounds","bar","half","skipOrLimit","boundingRects","maxW","maxH","parseBorderWidth","borderRadius","maxR","enableBorder","parseBorderRadius","outer","inner","skipX","skipY","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","mouseX","mouseY","inXRange","inYRange","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","lineCap","lineJoin","lineDash","drawOptions","SQRT2","centerX","yBoxTop","xBoxLeft","drawLegendBox","_textX","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","previous","sameItem","plugin_legend","_element","_args","legend","afterEvent","ci","useBorderRadius","borderCapStyle","borderJoinStyle","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","centerY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","findOrAddLabel","addedLabels","unshift","addIfString","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","rounded","almostWhole","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","LinearScale","defaultDatasetIdKey","reforwardRef","ref","setLabels","currentData","nextLabels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","nextDataset","currentDataset","cloneData","nextData","ChartComponent","redraw","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","destroyChart","useEffect","nextOptions","setOptions","role","forwardRef","createTypedChart","registerables","Bar"],"sourceRoot":""}